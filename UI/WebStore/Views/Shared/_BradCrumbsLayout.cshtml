@using WebStore.Controllers
@using WebStore.Domain.ViewModels.BreadCrumbs
@{
    Layout = "_LayoutBase";

    BreadCrumbsType type;
    if (Context.Request.Query.ContainsKey("SectionId"))
    {
        type = BreadCrumbsType.Section;
    }
    else
    {
        type = Context.Request.Query.ContainsKey("BrandId")
            ? BreadCrumbsType.Brand
            : BreadCrumbsType.None;
    }

    if ((string)ViewContext.RouteData.Values["action"] == nameof(CatalogController.Details))
    {
        type = BreadCrumbsType.Product;
    }

    var id = 0;
    var from_type = BreadCrumbsType.Section;

    switch (type)
    {
        default: throw new ArgumentOutOfRangeException();

        case BreadCrumbsType.None: break;

        case BreadCrumbsType.Section:
            id = int.Parse(Context.Request.Query["SectionId"].ToString());
            break;

        case BreadCrumbsType.Brand:
            id = int.Parse(Context.Request.Query["BrandId"].ToString());
            break;

        case BreadCrumbsType.Product:
            id = int.Parse(ViewContext.RouteData.Values["id"].ToString());
            if (Context.Request.Query.ContainsKey("FromBrand"))
            {
                from_type = BreadCrumbsType.Brand;
            }
            break;
    }
}

<div class="container">
    <vc:bread-crumbs type="@type" id="@id" from-type="@from_type"/>

    @RenderBody()
</div>

@section Styles
{
    @RenderSection("Styles", false)
}

@section Scripts
{
    @RenderSection("Scripts", false)
}